name: Lint JSON Schema

runs:
  using: "composite"
  steps:
    - name: Set up check-jsonschema
      shell: bash
      run: |
        pip install check-jsonschema

    - name: Set up environment
      shell: bash
      run: |
        # Sadly, composite actions currently don't support environment variables so we freestyle a replacement
        echo 'SCHEMAS_ROOT=src/schema' >> .gha-env
        echo 'EXAMPLES_ROOT=src/schema/examples' >> .gha-env

    - name: Verify schemas
      shell: bash
      run: |
        source .gha-env

        # We handle the return code ourselves to prevent the action from exiting on the first error
        rc=0

        while read -r file; do
          echo "Validating $file"
          if ! check-jsonschema --check-metaschema "$file"; then
            rc=1
          fi
        done < <(find "$SCHEMAS_ROOT" -name "*.json" -maxdepth 1)

        exit $rc

    - name: Verify examples
      shell: bash
      run: |
        source .gha-env

        # We handle the return code ourselves to prevent the action from exiting on the first error
        rc=0

        while read -r file; do
          schema=$(basename "$file")
          schema=$SCHEMAS_ROOT/${schema%%.*}.json
          echo "Validating $file against $schema"
          if ! check-jsonschema --schemafile "$schema" "$file"; then
            rc=1
          fi
        done < <(find "$EXAMPLES_ROOT" -name "*.json")

        exit $rc

    - name: Verify links
      shell: bash
      run: |
        function err {
          >&2 echo -e "\033[0;31m$@\033[0m"
        }

        rc=0

        while read -r file; do
          echo "Checking $file"

          pushd "$(dirname "$file")" > /dev/null

          while read -r location; do
            echo "Checking location $location"

            if [[ "$location" == http* ]]; then
              if ! curl --head --silent --fail "$location" 2>&1 > /dev/null; then
                err "$file references non-existent image $location"
                rc=1
              fi
            else
              path=$location
              if [[ "$location" == /* ]]; then
                path=$(git rev-parse --show-toplevel)/$location
              fi
              if [[ ! -f "$path" ]]; then
                err "$file references non-existent location $location"
                rc=1
              fi
            fi
          done < <(grep -oE "link:+[^#\[]*" "$(basename "$file")" | sed -E "s/^link:+//g")

          popd > /dev/null
        done < <(find . -type f -name "*.adoc")

        exit $rc
