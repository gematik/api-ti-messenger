/' 
# TI-Messenger 1.1
# TI-Messenger-Dienst
# UC - 10058
# Sequence Diagram
# Name: Akteur im Verzeichnisdienst hinzufügen
'/

@startuml
skinparam sequenceMessageAlign direction
skinparam minClassWidth 200
skinparam BoxPadding 1
skinparam sequenceReferenceHeaderBackgroundColor palegreen
scale max 2048 width

skinparam sequence {
ArrowColor black
ArrowFontSize 17
ActorBorderColor black
LifeLineBorderColor black
LifeLineBackgroundColor Gainsboro

ParticipantBorderColor Motivation
ParticipantBackgroundColor Motivation
ParticipantFontSize 20
ParticipantFontColor black
ParticipantBorderColor Black

ActorBackgroundColor Gainsboro
ActorFontColor black
ActorFontSize 20
}

autonumber

actor U as "Akteur in der Rolle\nUser-HBA"
box <size:18>Endgerät</size> #WhiteSmoke
  participant C as "TI-Messenger-Client"
  participant A as "Authenticator"
end box
participant konnektor as "Konnektor"
participant I as "zentraler IDP-Dienst" 
box <size:18>VZD-FHIR-Directory</size> #WhiteSmoke
  participant FP as "FHIR-Proxy"
  participant Auth as "Auth-Service"
  participant VZD as "FHIR-Directory"
end box

|||
note over U, I: \n<size:17>Der Akteur ist bei einem Messenger Service angemeldet (siehe AF_10057)</size>\n
|||

U->C: FHIR Ressourcen im \nVZD-FHIR-Directory \nhinzufügen (MXID)
  Activate C
C->C: Prüfung, ob gültiges \nowner-accesstoken \nvorliegt

|||
alt#LightGrey #AliceBlue <size:16>kein gültiges owner-accesstoken vorhanden</size>
|||

  C->Auth: GET /owner-authenticate
    Activate Auth
  Auth->Auth: Erzeuge PKCE Code \nfür verifier und challenge
  Auth-->C: HTTP 302 Redirect to IDP Authorization Endpoint
  Deactivate Auth

  C->A++: Deeplink authenticator://...
  A->I: GET {authorization_endpoint}
  Activate I

  I-->A: Authentication challenge
  A->konnektor++: ExternalAuthenticate

  konnektor --> A: ExternalAuthenticateResponse
  deactivate konnektor
  
  A->I: Authentication challenge response
  I-->A: HTTP 302 Redirect(auth_code)
  Deactivate I
  A-->C: {client_callback_uri}\nRedirect(auth_code)

    Deactivate A
       
  |||          
  C->Auth: GET /signin-gematik-idp-dienst(auth_code)
    Activate Auth
  |||
  Auth->I: POST {token_endpoint}(auth_code, verifier)
  Activate I
  return id_token
  Deactivate I
  Auth->Auth: ID_TOKEN validieren(id_token)
  Auth->Auth: erzeuge \nowner-accesstoken(id_token)
  Auth-->C: owner-accesstoken
    Deactivate Auth
  |||
end
      
|||

group <size:16>VZD-FHIR-Directory Eintrag</size>
  |||
  group <size:16>FHIR-Ressourcen lesen</size>
  |||
  C->FP: GET /owner/PractitionerRole/?... \nFinde Datensatz für eigene TelematikID(owner-accesstoken)
    Activate FP
  FP->FP: prüfe \nowner-accesstoken
  FP->VZD: HTTPS Forward
    Activate VZD
  VZD-->FP: result body json
    Deactivate VZD
  FP-->C: result body json
    Deactivate FP
  |||
  end
    
  |||
  group <size:16>FHIR-Ressourcen schreiben</size>
  |||
  C->FP: FHIR-Operationen um eigenen Datensatz zu verwalten\n(owner-accesstoken, Flag für Sichtbarkeit des Endpoints)
    Activate FP
  FP->FP: prüfe \nowner-accesstoken
  FP->VZD: HTTPS Forward
    Activate VZD
  VZD-->FP: result body json
    Deactivate VZD
  FP-->C: result body json
    Deactivate FP
     
  |||
  end

  C-->U: Status    
    Deactivate C
  |||
end
|||

  Deactivate C
@enduml
