@startuml
skinparam sequenceMessageAlign direction
skinparam WrapWidth 300
skinparam minClassWidth 150
skinparam BoxPadding 1
skinparam ParticipantPadding 50
skinparam sequenceReferenceHeaderBackgroundColor palegreen
scale max 2048 width

skinparam sequence {
ArrowColor black
ArrowFontSize 17
ActorBorderColor black
LifeLineBorderColor black
LifeLineBackgroundColor Gainsboro

ParticipantBorderColor Motivation
ParticipantBackgroundColor Motivation
ParticipantFontSize 20
ParticipantFontColor black
ParticipantBorderColor Black
ParticipantBackgroundColor MOTIVATION

ActorBackgroundColor Gainsboro
ActorFontColor black
ActorFontSize 20
}

autonumber

actor oa as "Akteur in der Rolle\nOrg-Admin"
  box <size:19>Endgerät</size> #WhiteSmoke
  participant frd as "Frontend des \nRegistrierungs-Dienstes"
  participant au as "gematik Authenticator"
  end box
participant ko as "Konnektor"
participant rd as "Registrierungs-Dienst \n(Relying Party)"
participant ip as "zentraler \nIDP-Dienst"

oa -> frd: Organisation authentisieren 

 activate frd
frd -> rd:""POST I_Registration""
 |||
 activate rd
      opt#LightGrey #AliceBlue <size:16>Download des IDP Discovery Dokumentes</size>
          |||        
            rd -> ip:""GET {HOSTNAME}/.well-known/openid-configuration""
            activate ip
            ip --> rd:signierte Base64-kodierte openid-configuration 
            deactivate ip
            |||
            rd -> rd:Prüfung der Signatur der openid-configuration
            |||
            rd -> rd:Download der öffentlichen Schlüssel und \nextrahieren des ""{authorization_endpoint}""
          |||
          end
|||
rd->rd: Erzeugung eines Zufallswertes (""CODE_VERIFIER"")  \nund Bildung darüber den Hash ""code_challenge"" \nmit Hash-Algorithmus S256

     
|||
rd->rd: Erstellung der Authentication Request URL\nmit den Request Parametern \n""Authentication Request URL=""\n""{authorization_endpoint}&{client_id}&""\n""{response_type}&{redirect_uri}&{state}&""\n""{code_challenge}&{code_challenge_method}&""\n""{scope}&{nonce}""
        |||

rd --> frd: Redirect zur ""{Authentication Request URL}""
 deactivate rd

        frd -> frd: Erstellung des ""challenge_path"" \n""authenticator://?challenge_path=""\n""{Authentication Request URL}""\n""&cardType=SMC-B""\n""&callback=DIRECT""
        frd -> au: Aufruf des Authenticators mit Deeplink 
        |||
        activate au        
          opt#LightGrey #AliceBlue <size:16>Download des IDP Discovery Dokumentes</size>
          |||        
            au -> ip:GET {HOSTNAME}/.well-known/openid-configuration
            activate ip
            ip --> au:signierte base64 kodierte openid-configuration 
            deactivate ip
            |||
            au -> au:Prüfung der Signatur der openid-configuration
            |||
            au -> au:Download der öffentlichen Schlüssel und \nextrahieren des ""{authorization_endpoint}""
          |||
          end
        |||
        
        au -> ip: ""GET {Authentication Request URL}""

        group #LightGreen <size:16>AUTHORIZATION_ENDPUNKT</size>
        |||
        activate ip
        ip -> ip: Prüfung ob ""client_id"" und ""scope"" \nbekannt und in dieser Kombination \nzulässig sind
        ip -> ip: Prüfung der claim ""redirect_uri"" \n gegen die beim IDP-Dienst\n registrierten ""redirect_uris""
        ip -> ip: Überführung der ""scope""\nInhalte in ""USER_CONSENT"" 
        ip -> ip: Erstellung der Authentication challenge\n(""CHALLENGE_TOKEN"")
        ip -> ip: Signieren des ""CHALLENGE_TOKEN""\nmit ""Prk_IDP_SIG""
        |||
        end
        ip -> au: ""CHALLENGE_TOKEN"" & ""USER_CONSENT""
        deactivate ip
        |||
        au -> au: Prüfen der Signatur des ""CHALLENGE_TOKEN""\nmit dem Schlüssel ""PuK_IDP_SIG""
        |||
        group#LightGrey #LightBlue <size:16>Signieren der Challenge mit Konnektor-Operationen</size>
        |||
          au -> ko: ""getCards(Aufrufkontext)""
           activate ko
          ko --> au: Status, Liste der verfügbaren Smartkarten
          |||
          au -> au: Auswahl der gesteckten SMC-B --> CardHandle
          |||
          au -> ko: ""GetPinStatus (Aufrufkontext, CardHandle,""\n""PinType (PIN.SMC))""
          ko --> au: Status, PinStatus
          |||
            opt#LightGrey #AliceBlue <size:16>Karte nicht freigeschaltet </size>
              au --> oa: Zustimmung zum ""USER_CONSENT""
              oa -> au: Zustimmung zur Verwendung der angefragten Daten
              au -> ko: ""VerifyPin (Aufrufkontext, CardHandle,""\n""PinType (PIN.SMC))""
              ko --> oa: Aufforderung der PIN-Eingabe
              oa -> ko: PIN-Eingabe
              ko --> au: Status
            |||
            end
          au -> ko: ""ExternalAuthenticate""\n""(Aufrufkontext, CardHandle,""\n""C.HCI.AUT, CHALLENGE_TOKEN)""
          ko --> au: Signierte ""CHALLENGE_TOKEN"""
        |||
        end
          deactivate ko
        |||
        au -> au: Verschlüsselung des signierten ""CHALLENGE_TOKEN""\n mit dem öffentlichen Schlüssel ""PuK_IDP_ENC""\n vom IDP-Dienst
        
        au ->ip: ""POST {authorization_endpoint}""(signiertes und verschlüsseltes ""CHALLENGE_TOKEN"", ""C.HCI.AUT"" der SMC-B)
        activate ip
        group #LightGreen <size:16>AUTHORIZATION_ENDPUNKT</size>
        |||
        ip -> ip: Entschlüsselung des ""CHALLENGE_TOKEN""\nmit ""PrK_IDP_ENC"" des IDP-Dienstes
        ip -> ip: Signaturprüfung des ""CHALLENGE_TOKEN""\nmit dem im ""x5c""-Header mitgelieferten\n""C.HCI.AUT"" Zertifikat
        ip -> ip: Prüfung der Gültigkeit der Attribute\naus dem ""CHALLENGE_TOKEN""
        ip -> ip: Erstellung des ""AUTHORIZATION_CODE""
        ip -> ip: Signieren des ""AUTHORIZATION_CODE""\n mit dem Schlüssel ""Prk_IDP_SIG""
        ip -> ip: Veschlüsselung des ""AUTHORIZATION_CODE""\nmit eigens erzeugten Schlüsselmaterial\n""(AUTH_CODE_ENC)""
        |||
        end
        ip --> au: Redirect zur ""redirect_uri""\ndes Registrierungs-Dienstes\nmit ""AUTHORIZATION_CODE""
          deactivate ip
        |||
        au -> rd: ""GET /redirect_uri?code={AUTHORIZATION_CODE}""
        activate rd
        rd --> au: HTTP 200
        deactivate au
        
        rd -> rd: Erzeugung eines ""AES256-Token-Key""
        rd -> rd: ""AES256-Token-Key"" und den\nunter 7) erzeugten ""CODE_VERIFIER""\n in ein ""KEY_VERIFIER"" Objekt einbetten 
        rd -> rd: ""KEY_VERIFIER"" mit ""PUK_IDP_ENC"" verschlüsseln
        
        rd -> ip: ""POST {token_endpoint}""\n""(AUTHORIZATION_CODE, KEY_VERIFIER)""
        group #Thistle <size:16>TOKEN_ENDPUNKT</size>
         activate ip
         |||
        ip -> ip: ""AUTHORIZATION_CODE"" mit\n""AUTH_CODE_ENC"" entschlüsseln
        ip -> ip: Signaturprüfung des\n""AUTHORIZATION_CODE""\nmittels ""PUK_IDP_SIG""
        ip -> ip: Entschlüsselung des ""KEY_VERIFIER""\nmit ""Prk_IDP_ENC""
        ip -> ip: Extrahieren des ""CODE_VERIFIER""\naus dem ""KEY_VERIFIER""
        ip -> ip: Extrahieren der ""CODE_CHALLENGE""\naus dem ""AUTHORIZATION_CODE""
        ip -> ip: Hash(S256) des ""CODE_VERIFIER""\nmit der ""CODE_CHALLENGE"" abgleichen  
        ip -> ip: Erzeugung des ""ID_TOKEN"" und\nSignieren mittels ""PrK_IDP_SIG""\nsowie Verschlüsselung mittels Token-Key
        |||
        end
        ip --> rd: ""ID_TOKEN""
        deactivate ip
        rd -> rd:  Entschlüsselung des Token\nmit ""AES256-Token-Key"" und Validierung\nmit ""PuK_IDP_SIG""
        rd -> rd: Prüfung der im Token\nenthaltenen ""ProfessionOID"""
        frd ->rd: Abfrage des Status(Polling)
        rd --> frd: Status der Authentisierung
         deactivate rd
        frd --> oa: Organisation erfolgreich Authentifiziert
@enduml
